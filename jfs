#!/usr/bin/env bash

set -e
set -o nounset
set -o pipefail
IFS=$'\n\t'

_ME="${0##*/}"
_VERSION="0.0.1"
_HOMEPAGE="https://github.com/tg-z/jfs"
COPY_FILE_OPT=0
GLOBAL_OPT=0

[ -z "${EDITOR}" ] && EDITOR="vim"

if [[ -n "${JUSTFILE_DIR}" ]]; then
  JUSTFILE_DIR="${HOME}/.local/share/justfiles"
else
  mkdir -p "${JUSTFILE_DIR}"
fi

# if [ -z "${1}" ]; then
# 	_help
# else
# 	terminal-notifier -message "you said: " "${1}"
# fi

_info() {
    # $*: info message
    printf "%b\n" "\033[32mINFO\033[0m ${*}" >&2
}

_warn() {
    # $*: warning message
    printf "%b\n" "\033[33mWARNING\033[0m ${*}" >&2
}

_error() {
    # $*: error message
    printf "%b\n" "\033[31mERROR\033[0m ${*}" >&2
    exit 1
}

_var() {
  _just="$(command -v just)"
  _fzf="$(command -v fzf)"
  _ag="$(command -v ag)"
  _fd="$(command -v fd)"
  _bat="$(command -v bat)"
}

_check() {
  _var
  if [ ! -x "${_just}" ]; then
	  echo "you must install just to run this command"
	  exit 1
  fi
  if [ ! -x "${_fzf}" ]; then
	  echo "you must install fzf to run this command"
	  exit 1
  fi
  if [ ! -x "${_ag}" ]; then
      echo "you must install ag to run this command"
      exit 1
  fi
  if [ ! -x "${_fd}" ]; then
	  echo "you must install fd to run this command"
	  exit 1
  fi
  if [ ! -x "${_bat}" ]; then
	  echo "you must install bat to run this command"
	  exit 1
  fi
}

_copy() {
  if [ -x "$(command -v xclip)" ]; then
    echo "${1}" | xclip -selection c
  fi

  if [ -x "$(command -v pbcopy)" ]; then
    echo "${1}" | pbcopy
  fi
}

_global () {
        local _list
	_list="$(fd justfile '/Users/bluetooth' -i -H -t f --maxdepth 6)"
        printf "%s\n" "${_list}"
}

find() {
  _check
  local files="${1}"
  local results
  results="$("${_ag}" -rg "${files}" "${JUSTFILE_DIR}")"

  if [ ! "${results}" -eq 0 ]; then
    _info "No results were found"
    exit 1
  fi

  if [[ "${COPY_FILE_OPT}" -gt 1 ]]; then
    _copy "${results}"
  fi

  echo "${results}"

  if [[ "${GLOBAL_OPT}" -gt 1 ]]; then
	  _global
  fi
}

_banner() {
  cat <<EOF
 __   ___        
 |__|.'  _|.-----.
 |  ||   _||__ --|
 |  ||__|  |_____|
|___|             

EOF
}

_commands() {
  cat <<EOF
Available commands:
  commands
  find
  help
  version
EOF
}

help() {
  _banner
  cat <<EOF
${_ME} - a tool for just dealing with your justfiles.

Usage:
  ${_ME} <cmd> <opts> args
Options:
  -f 	Copy justfile location/path after running command.
  -h 	Display this help information.
  -V 	Display version information and exit.
Home:
  ${_HOMEPAGE}
Help:
  ${_ME} help
EOF
_commands
}

version() {
  printf "%s %s\n" "${_ME}" "${_VERSION}"
}

while getopts 'fghV' option; do
	case "${option}" in
		f)
			shift
			COPY_FILE_OPT=1
			;;
		g)
			shift
			GLOBAL_OPT=1
			;;
		h)
			shift
			help
			exit 0
			;;
		V)
			shift
			version
			exit 0
			;;
		*)
			_error "command not found" >&2
			false
			;;
	esac
done

case "${1:-help}" in
	("commands")
		shift
		_commands
		;;
	("find")
		shift
		find "${1}"
		;;
	("help")
		shift
		help
		;;
	("version")
		shift
		version
		;;
	*)
		_error "command not found" >&2
		false
		;;
esac

# ju() {
# if [ -z "${JUSTFILES_DIR}" ]
# then
# 	printf "%s" "you must set a directory for your justfiles\n"
# 	false
# else
# just -d "${JUSTFILES_DIR}"
# }
